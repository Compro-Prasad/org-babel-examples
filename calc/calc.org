#+TITLE: calc examples
#+DATE: <2013-08-09 Fri>
#+AUTHOR: Derek Feichtinger
#+EMAIL: derek.feichtinger@psi.ch
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not LOGBOOK) date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.3.1 (Org mode 8.0.7)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export

* General
  - Note that, unlike in usual computer notation, multiplication binds
    more strongly than division: `a*b/c*d' is equivalent to
    `(a*b)/(c*d)'

* Functions for formulas
  - [[info:calc#Formulas]]
  - factorial: $6! => 720 $   also fact(6) can be used in writing
  - power: $pow(2, 3) => 8 $   $2^3 => 8 $
  - modulo: $mod(10, 3) => 1$  $10 % 3 => 1 $
  - binomial coefficient: $choose(3, 2) => 3$
  - random numbers: $random(10) => 7$
  - binomial distribution: the result (`utpb(x,n,p)') is the
    probability that an event will occur X or more times out of N
    trials, if its probability of occurring in any given trial is P:
    $utpb(2, 6, 1/6) => 0.263224451304$
  - gaussian distribution with mean m and stdev s. Probability that a normal
    distributed random variable will exceed x: uttn(x,m,s):
    $utpn(0.2b, 0, 0.5) => 0.34457825839$
    - http://www-zeuthen.desy.de/~kolanosk/smd_ss02/skripte/

      $now(0) => <11:03:18pm Sun Aug 11, 2013>$
      $unixtime(now(0)) => 1376262280$

* calc usage in tables
** Unit conversions
   - from http://article.gmane.org/gmane.emacs.orgmode/93489

   Displaying all calc units
   #+BEGIN_SRC emacs-lisp
     (calc-view-units-table 1)
   #+END_SRC

   | distance | time   | speed       |
   |----------+--------+-------------|
   | 3 km     | 2.5 hr | 1.2 km / hr |
   #+TBLFM:  @2$3=$1/$2

   | km    |      ft |
   |-------+---------|
   | 2.5km | 8202.10 |
   #+TBLFM: $2='(calc-eval (math-convert-units (calc-eval $1 'raw) (calc-eval "ft" 'raw))); %.2f

   | speed        | simplified speed |
   |--------------+------------------|
   | 40km / 2.5hr | 16. km / hr      |
   #+TBLFM:  @2$2=usimplify($1)

   
   Defining a new calc function for unit conversion with defmath
   #+BEGIN_SRC emacs-lisp
   (defmath uconv (expr target-units &optional pure)
     (math-convert-units expr target-units pure))
   #+END_SRC

   #+RESULTS:
   : calcFunc-uconv

   | km     | ft           |
   |--------+--------------|
   | 2.5 km | 8202.0997 ft |
   #+TBLFM: $2=uconv($1, ft)

   Using the units from the table header:

   |  km |        ft |
   |-----+-----------|
   | 2.5 | 8202.0997 |
   #+TBLFM: $2 = uconv($1 * @<$1, @<$2, t)

   The same without a user's defmath:

   |  km |        ft |
   |-----+-----------|
   | 2.5 | 8202.0997 |
   #+TBLFM: $2 = usimplify($1 * @<$1 / @<$2)

   | Unit | Definition |
   |------+------------|
   | km   | #ERROR     |
   #+TBLFM: @2$2='(calc-get-unit-definition $1)
   
* babel calc

  Not too useful, currently. Embedded calc certainly is better for inlining
  math in documents.

  #+BEGIN_SRC calc
24
3
'/
  #+END_SRC

  #+RESULTS:
  : 8


  - solving an equation
    #+BEGIN_SRC calc :exports both
fsolve(x*2+x=4,x)
#+END_SRC

    #+RESULTS:
    : x = 1.33333333333

  
  - solving a linear system of equations
    #+BEGIN_SRC calc
  fsolve([x + y = a, x - y = b],[x,y])
    #+END_SRC

    #+RESULTS:
    : [x = a + (b - a) / 2, y = (a - b) / 2]

* calc from lisp

  calc-eval can be used for most interactions with calc. 'push puts the number
  on the stack.
  #+BEGIN_SRC emacs-lisp
  (progn (calc-eval "10 ft" 'push) (calc-explain-units))
  #+END_SRC
  
* COMMENT babel settings
Local variables:
org-confirm-babel-evaluate: nil
org-export-babel-evaluate: nil
End:
