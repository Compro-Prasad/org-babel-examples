#+TITLE: ipython-babel
#+DATE: <2015-07-02 Thu>
#+AUTHOR: Derek
#+EMAIL: derek.feichtinger@psi.ch
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.5.1 (Org mode 8.2.10)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export

* Version information
  
  #+BEGIN_SRC emacs-lisp -n :exports both
    (princ (concat
            (format "Emacs version: %s\n"
                    (emacs-version))
            (format "org version: %s\n"
                    (org-version))
            ;; (format "ob-ipython version: %s\n"
            ;; (pkg-info-version-info 'ob-ipython))
            ))        
  #+END_SRC

  #+RESULTS:
  : Emacs version: GNU Emacs 24.5.1 (x86_64-unknown-linux-gnu, GTK+ Version 3.10.8)
  :  of 2015-05-04 on dflt1w
  : org version: 8.2.10

  The examples also use the =ob-ipython= package from MELPA

* Simple examples

  #+BEGIN_SRC ipython :session ip1
  %matplotlib inline
  import matplotlib.pyplot as plt
  import numpy as np
#+END_SRC

  #+RESULTS:

#+BEGIN_SRC ipython :session ip1 :results value :exports both
  def foo(x):
      return x + 9

  [foo(x) + 7 for x in range(7)]
#+END_SRC  

#+RESULTS:
: [16, 17, 18, 19, 20, 21, 22]


#+BEGIN_SRC ipython :session ip1 :file ipython-babel_att/image.png :exports both
  plt.hist(np.random.randn(20000), bins=200)
#+END_SRC

#+RESULTS:
[[file:ipython-babel_att/image.png]]



#+BEGIN_SRC ipython :session ip1 :results output
print "this is an echo"
#+END_SRC

#+RESULTS:
: this is an echo


* Example for using ipython magic commands

#+BEGIN_SRC ipython :session ip1 :results output
%timeit 1+1
#+END_SRC

#+RESULTS:
: The slowest run took 63.99 times longer than the fastest. This could mean that an intermediate result is being cached 
: 100000000 loops, best of 3: 18.6 ns per loop

  
* Obsolete note

  This chapter described workarounds to execute ipython as the python
  shell using the standard ob-python babel implementation before I started
  using ob-ipython.
  
  ipython babel works best for testing interactive magic commands, but there are problems
  when code blocks are copied into the babel session (in ipython these snippets need
  to get pasted using %paste or %cpaste).

  there is a discussion and a defadvice in this discussion
  http://emacs.stackexchange.com/questions/3859/working-setup-for-ipython-in-babel

  #+BEGIN_SRC emacs-lisp
; use %cpaste to paste code into ipython in org mode
(defadvice org-babel-python-evaluate-session
  (around org-python-use-cpaste
         (session body &optional result-type result-params) activate)
  "add a %cpaste and '--' to the body, so that ipython does the right thing."
  (setq body (concat "%cpaste -q \n" body "\n--"))
  ad-do-it
  )
#+END_SRC


* Babel environment setup and ipython setup

Before the advent of op-ipython I used a virtualenv with these settings:
python-shell-virtualenv-path: "/home/dfeich/py-virtualenv/notebook"
org-babel-python-command: "/home/dfeich/py-virtualenv/notebook/bin/ipython --no-banner --classic --no-confirm-exit"

Local Variables:
org-confirm-babel-evaluate: nil
org-export-babel-evaluate: nil
End:
