#+TITLE: python org-babel exporting
# #+DATE: <2013-07-10 Wed>
#+AUTHOR: Derek Feichtinger
#+EMAIL: derek.feichtinger@psi.ch
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not LOGBOOK) date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t toc:t todo:t |:t
# #+CREATOR: Emacs 24.3.1 (Org mode 8.0.5)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
* Version information
  #+BEGIN_SRC emacs-lisp -n :exports both
        (princ (concat
                (format "Emacs version: %s\n"
                        (emacs-version))
                (format "org version: %s\n"
                        (org-version))))        
  #+END_SRC

  #+RESULTS:
  : Emacs version: GNU Emacs 24.5.1 (x86_64-unknown-linux-gnu, GTK+ Version 3.10.8)
  :  of 2015-05-04 on dflt1w
  : org version: 8.3.2

  #+BEGIN_SRC sh :results output :exports both
  python -V 2>&1
  #+END_SRC

  #+RESULTS:
  : Python 2.7.11 :: Continuum Analytics, Inc.

* Links and Documentation
  - http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html

* Generating tables as output

  Example 1:
  #+BEGIN_SRC python -n :exports both :results value table
    x = range(1,10)
    y = [xe*3 for xe in x]
    return [x,y]
  #+END_SRC

  #+RESULTS:
  | 1 | 2 | 3 |  4 |  5 |  6 |  7 |  8 |  9 |
  | 3 | 6 | 9 | 12 | 15 | 18 | 21 | 24 | 27 |



  Example 2:
  #+BEGIN_SRC python -n :exports both :results value table
import numpy as np

x = range(1,10)
y = [xe*3 for xe in x]
return np.array([x,y]).transpose()
  #+END_SRC

  #+RESULTS:
  | 1 |  3 |
  | 2 |  6 |
  | 3 |  9 |
  | 4 | 12 |
  | 5 | 15 |
  | 6 | 18 |
  | 7 | 21 |
  | 8 | 24 |
  | 9 | 27 |

* Calling a python function from inside an org table

  Here I define the function. It takes =epoch= as the variable, which
  is a unix time stamp. I want to have it converted to an Org type
  time format.
  
    #+NAME: epoch2day
    #+BEGIN_SRC python :results output :var epoch=1262675465119 :exports both
    time = epoch
    import datetime
    strtime = str(time)
    datetimestamp = datetime.datetime.utcfromtimestamp(int(strtime[:10]))
    print datetimestamp.strftime('[%Y-%m-%d %a %H:%M:%S]')
    #+END_SRC

    #+RESULTS: epoch2day
    : [2010-01-05 Tue 07:11:05]

  In the table we need to refer to the named source block by using the
  a short lisp form involving =org-sbe=. If the table value that is
  referred to in the function is to be interpreted as a number, the
  reference uses a single dollar sign, e.g. $1 (as here). If it should
  be interpreted as a string, one puts an additional dollar sign in
  front, e.g. $$1.
    
    
    |         epoch | day                       |
    |---------------+---------------------------|
    | 1262675465119 | [2010-01-05 Tue 07:11:05] |
    |        123456 | [1970-01-02 Fri 10:17:36] |
    |      99998754 | [1973-03-03 Sat 09:25:54] |
    #+TBLFM: $2='(org-sbe epoch2day (epoch $1))
    
* Matplotlib
** plotting of a simple graph
#+begin_src python :results file :exports both
import matplotlib, numpy
matplotlib.use('Agg')
import matplotlib.pyplot as plt
fig=plt.figure(figsize=(4,2))
x=numpy.linspace(-15,15)
plt.plot(numpy.sin(x)/x)
fig.tight_layout()
plt.savefig('python-matplot-fig.png')
return 'python-matplot-fig.png' # return filename to org-mode
#+end_src

#+RESULTS:
[[file:python-matplot-fig.png]]

** Plotting from an Org table

The table is passed to python as a list

#+TBLNAME: table1
| x |  y |
|---+----|
| 1 |  1 |
| 2 |  4 |
| 3 |  9 |
| 4 | 16 |
| 5 | 25 |
| 6 | 36 |
| 7 | 49 |
#+TBLFM: @2$2..@>$2=$1*$1::@3$1..@>$1=@-1 + 1

#+begin_src python :results file :var data=table1 :exports both
import matplotlib
import numpy as np
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import seaborn

fname='python-matplot-fig2.png'
ar = np.array(data).transpose()
fig=plt.figure(figsize=(4,2))
plt.plot(ar[0],ar[1])
plt.title('Square function')
fig.tight_layout()
plt.savefig(fname)
return fname # return filename to org-mode
#+end_src

#+RESULTS:
[[file:python-matplot-fig2.png]]

* Pandas
** printing a data frame as a table (and noweb block inclusion)

   I define a function in a named src block with name =dframeToOrg=.
   This will print out a nice table format that org will recognize.
   The function currently assumes that the first line is the title
   line, and will put a horizontal line below it.
   
#+NAME: dframeToOrg
   #+BEGIN_SRC python :exports source
  def dataFrameToOrgTbl(dframe, name=None, caption=None, attr=None, index=True,
                        date_format=None, hlines=None):
      if name:
          print "#+NAME: %s" % name

      if caption:
          print "#+CAPTION: %s" % caption

      if attr:
          print "#+ATTR_LATEX: %s" % attr


      lines = '|' + dframe.to_csv(None, sep='|', line_terminator='|\n|',
                                  encoding='utf-8', index=index, date_format=date_format).rstrip("|").rstrip("\n")

      hlines_tmp=[]
      if hlines == None:
          hlines_tmp.append(1) # per default add a hl after the 1st line
      else:
          for hl in hlines:
              if hl < 0:
                  hlines_tmp.append(len(lines.split('\n')) + hl)
              else:
                  hlines_tmp.append(hl)

      for i,l in enumerate(lines.split('\n')):
          if i in hlines_tmp:
              print "|-----"
          print l
   #+END_SRC

   In the following source block, I demonstrate how to use the =noweb=
   syntax of including a named block within another, by referring to
   our DataFrame printing block by =<<dframeToOrg>>=

   #+BEGIN_SRC python :results output raw drawer :noweb yes :exports both
    import pandas as pd
    import numpy as np

    # Here the block with the dataFrameToorgTbl function will be inserted
    <<dframeToOrg>>
    df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,
                     'B' : ['A', 'B', 'C'] * 4,
                     'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,
                     'D' : np.random.randn(12),
                     'E' : np.random.randn(12)})

    dataFrameToOrgTbl(df)
   #+END_SRC

   #+RESULTS:
   :RESULTS:
   |    | A     | B | C   |               D |               E |
   |----+-------+---+-----+-----------------+-----------------|
   |  0 | one   | A | foo | -0.177492553046 | -0.374836967216 |
   |  1 | one   | B | foo |  0.307372063379 |   1.30933334256 |
   |  2 | two   | C | foo | -0.506459622617 |  -1.24683168285 |
   |  3 | three | A | bar | -0.672410967263 |  -1.54583742192 |
   |  4 | one   | B | bar |  0.148010312125 |   1.26706909082 |
   |  5 | one   | C | bar |   0.96101584612 |  0.185088824718 |
   |  6 | two   | A | foo |   -1.1184963973 | -0.688959136818 |
   |  7 | three | B | foo |  0.302270097906 | -0.187694779632 |
   |  8 | one   | C | foo |  -1.24775380532 | -0.372942271299 |
   |  9 | one   | A | bar |  -1.39539099135 | 0.0619111727805 |
   | 10 | two   | B | bar | -0.130769234691 |  -1.85543558128 |
   | 11 | three | C | bar | -0.663429922864 |  0.474627019679 |
   :END:


   The noweb syntax is mostly used in literate programing, where
   we produce code files from the org file (the process is
   called /tangling/).

*** data frame printing using Ipython.display   
   As an alternative, the display function from Ipython is also able
   to align a frame. I only managed to get =diplay_pretty= working
   up to now, and its output is lacking table separators. So, it
   only displays nicely in an example environment.

   The display_latex and display_html functions produce no output.
   
   #+BEGIN_SRC python :results output verbatim :noweb yes :exports both
     import pandas as pd
     import numpy as np
     from IPython.display import display_pretty

     df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,
                      'B' : ['A', 'B', 'C'] * 4,
                      'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,
                      'D' : np.random.randn(12),
                      'E' : np.random.randn(12)})

     display_pretty(df)
   #+END_SRC

   #+RESULTS:
   #+begin_example
	   A  B    C         D         E
   0     one  A  foo  0.667950 -0.266868
   1     one  B  foo  0.369191 -0.795070
   2     two  C  foo -0.780600 -1.273259
   3   three  A  bar  0.150728 -1.535735
   4     one  B  bar  0.026353 -0.316189
   5     one  C  bar  0.485256 -0.254337
   6     two  A  foo  0.119993  0.698165
   7   three  B  foo -1.014094 -0.055146
   8     one  C  foo -0.302114 -0.414778
   9     one  A  bar -0.508872  0.852937
   10    two  B  bar  0.095404  1.048710
   11  three  C  bar -1.303801 -0.491319
#+end_example
   
*** an older and simpler dataFrame printing alternative:
   In order to get a nice org table, it is necessary to pass the
   frame's contents back as a list. The column names end up as the
   first row in the table. I cut this row away by using the [1:]
   slice.

    #+BEGIN_SRC python :results value table
    import pandas as pd
    import numpy as np
    import sys

    df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,
                     'B' : ['A', 'B', 'C'] * 4,
                     'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,
                     'D' : np.random.randn(12),
                     'E' : np.random.randn(12)})

    return(np.array(list(df.T.itertuples())).transpose()[1:])
    #df.to_csv(sys.stdout, sep='|',line_terminator='|\n')
    #return (df.to_string(col_space=5, justify='right',index=False))

    # this is a good one
    #print '|',(df.to_csv(None, sep='|', line_terminator='|\n|', encoding='utf-8'))

  #+END_SRC

  #+RESULTS:
  | one   | A | foo |   0.0938808446011 |  0.164297355457 |
  | one   | B | foo |   -0.789300199571 | -0.511961867306 |
  | two   | C | foo |     1.95021689376 | 0.0232752902683 |
  | three | A | bar |    0.510081471979 |  0.528985415096 |
  | one   | B | bar |   -0.488878857101 |   1.25402845388 |
  | one   | C | bar |   -0.184935360749 | -0.732186323506 |
  | two   | A | foo |    -1.77738274849 | -0.955535365892 |
  | three | B | foo |   -0.804053077993 |  -1.53545424683 |
  | one   | C | foo |   -0.475823420406 | -0.597569166696 |
  | one   | A | bar |   -0.122500579966 | -0.390227759637 |
  | two   | B | bar |   -0.182471796578 | -0.394139328993 |
  | three | C | bar | -0.00648778760846 | 0.0199194965102 |

** plotting a data frame (and placing a code reference)
#+TBLNAME: table2
| x |  y |
|---+----|
| 1 |  1 |
| 2 |  4 |
| 3 |  9 |
| 4 | 16 |
| 5 | 25 |
| 6 | 36 |
| 7 | 49 |
#+TBLFM: @2$2..@>$2=$1*$1::@3$1..@>$1=@-1 + 1

Here we also show how a code reference works. It can be inserted using
the *org-store-link* command while editing the src code in the dedicated
buffer:

In line [[(zcol)]] we define a new column (in this sentence you should see
the number of the respective line in the exported file)

The *-r* flag in the =BEGIN_SRC= line removes the reference string
from the source code listing in the output (else the string would have
ended up in the exported version's source code).  Regrettably the
reference is not removed when the code gets executed, so I need to
insert language specific commenting to keep the code functional.

  #+BEGIN_SRC python -n -r :results file :var data=table2 :exports both
    import matplotlib
    import matplotlib.pyplot as plt
    import pandas as pd
    import numpy as np
    matplotlib.use('Agg')
    import seaborn
    
    fname='python-matplot-fig3.png'
    df = pd.DataFrame(data)
    df.columns = ['x','y']
    df['z'] = df['x'] * 3                                             #(ref:zcol)
    
    df.plot(figsize=(4,2))
    plt.savefig(fname)
    return fname
  #+END_SRC

  #+RESULTS:
  [[file:python-matplot-fig3.png]]

** time series resampling

  Let's say we are taking measurements twice a day, every 12h.
  #+BEGIN_SRC python :results value table :exports both
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

ts = pd.date_range('2013-07-01 06:00:00', periods=20, freq='12h')
val = [x * 10.0 for x in range(len(ts))]

tdf = pd.DataFrame({'value': val}, index=ts)
# Now we put one observation as invalid
tdf.value[14] = np.NaN
# and we delete another one
#tdf = tdf.drop(tdf.index[2])
tdf = tdf.drop(tdf.index[6:8])

newdf = tdf.resample('1D', loffset='6h',how='min').rename(columns={'value': '1D_resample'})
newdf['diff'] = newdf.diff()

return pd.concat([tdf,newdf], join='inner',axis=1)

  #+END_SRC

  #+RESULTS:
  #+begin_example
  value  1D_resample  diff
  2013-07-01 06:00:00      0            0   NaN
  2013-07-02 06:00:00     20           20    20
  2013-07-03 06:00:00     40           40    20
  2013-07-05 06:00:00     80           80   NaN
  2013-07-06 06:00:00    100          100    20
  2013-07-07 06:00:00    120          120    20
  2013-07-08 06:00:00    NaN          150    30
  2013-07-09 06:00:00    160          160    10
  2013-07-10 06:00:00    180          180    20
#+end_example

* Sympy

  I define a post-wrapping function for putting the results into the desired equation environment.
  #+NAME: scrWrapEquation
  #+BEGIN_SRC sh :results output :exports source :var=outp
    cat <<EOF
    \begin{equation}
    $outp
    \end{equation}
    EOF
  #+END_SRC

  The correct preview of the resulting LaTeX fragment I only get with
  the /output drawer/ results options. I tested rendering with the
  =:results latex= option, but the resulting LaTeX block is not
  rendered by the =org-toggle-latex-fragment= command (=C-c C-x C-l=).
  
  #+BEGIN_SRC python :results output drawer :exports both :post scrWrapEquation(outp=*this*)
    import sympy as sym

    x = sym.Symbol('x')
    k = sym.Symbol('k')

    print sym.latex(sym.Integral(1/x, x))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  \begin{equation}
  \int \frac{1}{x}\, dx
  \end{equation}
  :END:

  The above LaTeX equation is also rendered nicely in the HTML export.
  

  For simple in-buffer consummation, one may also want to just use the ASCII output
  #+BEGIN_SRC python :results output :exports both
    import sympy as sym
    import sys

    x = sym.Symbol('x')
    k = sym.Symbol('k')

    print sym.pretty_print(sym.Integral(1/x, x))

  #+END_SRC

  #+RESULTS:
  :   /    
  :  |     
  :  | 1   
  :  | - dx
  :  | x   
  :  |     
  : /      
  : None

  Or as an alternative, the unicode rendering.
  
  #+BEGIN_SRC python :results output :exports both
    import sympy as sym
    import sys

    import codecs
    sys.stdout = codecs.getwriter('utf8')(sys.stdout)

    x = sym.Symbol('x')
    k = sym.Symbol('k')

    print sym.pretty_print(sym.Integral(1/x, x), use_unicode=True)

  #+END_SRC

  #+RESULTS:
  : ⌠     
  : ⎮ 1   
  : ⎮ ─ dx
  : ⎮ x   
  : ⌡     
  : None

* Unicode related problems in Org Babel

  The terminal to which org babel writes output seems to be a dumb ASCII type
  terminal. If one wants to print non-ASCII characters, the characteristics of
  the output device must be defined using the =codecs= module.
  
  #+BEGIN_SRC python :results output :exports both
    # -*- coding: iso-8859-15 -*-

    # the above line is needed, so that python accepts the Umlauts
    # in the following line
    strg = u'Can we see Umlauts? äöü. And accents? éè.'

    import sys

    try:
        print strg
    except:
        print "Expected error:", sys.exc_info()[0]

    import codecs
    sys.stdout = codecs.getwriter('utf8')(sys.stdout)

    print "\nNow it works:\n", strg

  #+END_SRC

  #+RESULTS:
  : Expected error: <type 'exceptions.UnicodeEncodeError'>
  : 
  : Now it works:
  : Can we see Umlauts? äöü. And accents? éè.

  Another possibility is to change the default encoding, even
  though this seems less clean, since it requires reloading sys.
  #+BEGIN_SRC python :results output :exports both
    # -*- coding: iso-8859-15 -*-
    import sys

    strg = u'Can we see Umlauts? äöü. And accents? éè.'

    print 'default encoding is now %s' % sys.getdefaultencoding()
    try:
        print strg
    except:
        print "Expected error:", sys.exc_info()[0]

    # THESE ARE THE RELEVANT LINES
    reload(sys)  
    sys.setdefaultencoding('utf8')

    print '\ndefault encoding is now %s' % sys.getdefaultencoding()
    print "Now it works:\n", strg

  #+END_SRC

  #+RESULTS:
  : default encoding is now ascii
  : Expected error: <type 'exceptions.UnicodeEncodeError'>
  : 
  : default encoding is now utf8
  : Now it works:
  : Can we see Umlauts? äöü. And accents? éè.

  
* COMMENT Environment setup and test
  #+BEGIN_SRC python :exports both :results value
import sys
import pandas
return(sys.executable)

  #+END_SRC

  #+RESULTS:
  : /home/dfeich/py-virtualenv/notebook/bin/python

These definitions are necessary for having babel use the correct
virtual environment

Before using the anaconda python distribution I was a heavy user of python
virtualenv. I do not use this much any more, but these are the relevant
options:
- python-shell-virtualenv-path: only affects sessions via the run-python function
- org-babel-python-command: defines executable for non-session src blocks

# python-shell-virtualenv-path: "/home/dfeich/py-virtualenv/notebook"
# org-babel-python-command: "/home/dfeich/py-virtualenv/notebook/bin/python"

Local Variables:
org-confirm-babel-evaluate: nil
org-export-babel-evaluate: nil
End:

