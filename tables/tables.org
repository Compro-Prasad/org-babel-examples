#+TITLE: tables
#+DATE: <2014-02-18 Tue>
#+AUTHOR: Derek Feichtinger
#+EMAIL: derek.feichtinger@psi.ch
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not "LOGBOOK") date:t
#+OPTIONS: e:t email:nil f:t inline:t num:t p:nil pri:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t toc:t todo:t |:t
#+CREATOR: Emacs 24.3.1 (Org mode 8.2.5h)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export

* tables with lisp formulas

  the fields are read as strings, except if the modifiers ";N" for numeric or ";L" for
  using literal values are given.

  Tip: try using the table debugger (C-c {) if something goes wrong.

  |   | Row | c2 | c3  | Add | Add2 |
  | ! |     | c2 | c3  |     |      |
  | # | A   |  1 | 2   |   3 |    3 |
  | # | B   |  4 | 7   |  11 |   11 |
  | # | C   |  4 | str |   4 |    4 |
  #+TBLFM: $5='(+ (string-to-number $3) (string-to-number $c3))::$6='(+ $c2 $c3);N

  
  #+BEGIN_SRC emacs-lisp
    (defun my-colsum-if (keylist vallist keymatch)
    "sum values in vallist if the corresponding key matches the keymatch argument"
      (cl-loop for key in keylist
               for val in vallist
               when (equal key keymatch)
               sum (string-to-number val)))
  #+END_SRC

  
  |   | Class      |       value |
  | ! | class      |       value |
  |---+------------+-------------|
  | # | A          |           3 |
  | # | B          |           8 |
  | # | C          |           2 |
  | # | A          |           3 |
  | # | B          |           5 |
  | # | C          |           9 |
  |---+------------+-------------|
  | # | all values | 3 8 2 3 5 9 |
  | # | sum        |          30 |
  | # | sum if A   |           6 |
  | # | sum if B   |          13 |
  #+TBLFM: $3='(random 10)::@9$3='(mapconcat 'identity (list @I..@II) " ")::@10$3='(apply '+ (list @I..II));N::@11$3='(my-colsum-if (list @I$class..@II$class) (list @I..II) "A")::@12$3='(my-colsum-if (list @I$class..@II$class) (list @I..II) "B")
  #+TBLFM: 

* Using src block functions for calculating table fields
** basic usage

  The *org-sbe* macro (warning: it was called *sbe* in earlier org
  versions) allows calling the previously defined src blocks from
  within table formulas and feeding them then named arguments.

  #+NAME: mydouble
  #+header: :var x=2
  #+BEGIN_SRC emacs-lisp :results silent
  (* 2 x)
  #+END_SRC

  
  |   |    A | calc double | lisp double | lisp divide |
  | ! | colA |        colB |        colC |        colD |
  |---+------+-------------+-------------+-------------|
  | # |    1 |           2 |           2 |           2 |
  | # |    3 |           6 |           6 |           2 |
  | # |    9 |          18 |          18 |           2 |
 #+TBLFM: $3=$colA*2::$4='(org-sbe mydouble (x $colA))::$5='(org-sbe mydivide (x $colB) (y $colA))

  *If the field references should be read as strings*, one needs to
  add an additional dollar sign, e.q. =$$1, $$colname=, a single
  dollar sign =$1= reads the field value as a number.  Here is an
  example reading in date strings, and using calc functions for doing
  some time arithmetic.
  
  #+name: addmonths
  #+BEGIN_SRC emacs-lisp :results silent :var argdate="2014-03-01" argmonths="10"
    (let ((calc-date-format
	   '(YYYY "-" MM "-" DD)))
      (math-format-date (calcFunc-bsub (calcFunc-incmonth (math-parse-date argdate) (string-to-number argmonths)) 1))
      )
  #+END_SRC

  |   | WP     |                     | WP duration |   WP start |     WP end |
  |   | number | subject             |      months |       date |       date |
  | ! | wpid   | wpname              |    wpmonths |      sdate |      edate |
  |---+--------+---------------------+-------------+------------+------------|
  | # | WP0    | Project Management  |          24 | 2015-01-01 | 2016-12-30 |
  | # | WP1    | IT Infrastructure   |          24 | 2015-01-01 | 2016-12-30 |
  | # | WP2    | IdM Mngm + Rem Acc  |          12 | 2015-01-01 | 2015-12-31 |
  | # | WP3    | Data Catalog        |           9 | 2015-01-01 | 2015-09-30 |
  | # | WP4    | provide existing SW |          24 | 2015-01-01 | 2016-12-30 |
  | # | WP5    | SW development      |          24 | 2015-01-01 | 2016-12-30 |
  |---+--------+---------------------+-------------+------------+------------|
  | # |        | TOTAL               |             |            |            |
  #+TBLFM: @I$6..@II$6='(org-sbe addmonths (argdate $$sdate) (argmonths $$wpmonths))


  A function which sums up the values in a column of table tbl if col1
  matches match1 and col2 matches match2

  #+NAME: calc_add_if_match2
  #+HEADER: :var tbl="tbl_grp" col1="group" col2="use" vcol="value" match1="C" match2="1"
  #+BEGIN_SRC emacs-lisp :exports code 
     ;; add vcol column values if col1 matches match1 and col2 matchtes match2
     (let ((c1list (org-table-get-remote-range tbl (format "@I$%s..@>$%s" col1 col1)))
           (c2list (org-table-get-remote-range tbl (format "@I$%s..@>$%s" col2 col2)))
           (vallist (org-table-get-remote-range tbl (format "@I$%s..@>$%s" vcol vcol))))
       (cl-loop for c1tst in c1list
                for c2tst in c2list
                for val in vallist
                when (and (equal c1tst match1) (equal c2tst match2))
                sum (string-to-number val))
       )
  #+END_SRC

  #+RESULTS: calc_add_if_match2
  : 5

  #+NAME: tbl_grp
  |   | name    | group | use | value |
  | ! | name    | group | use | value |
  |---+---------+-------+-----+-------|
  |   | john    | B     |   1 |     1 |
  |   | beth    | B     |   0 |     3 |
  |   | mike    | C     |   1 |     5 |
  |   | leslie  | A     |   0 |     7 |
  |   | barbara | A     |   1 |     4 |
  |   | ken     | C     |   0 |     2 |
  |   | thomas  | A     |   1 |     8 |

  To demonstrate the above code, we use it to find the sum of all values in the
  above table where the =group= matches the group column in the table below, and
  where the =use= column matches "1".

  |   | group | sum |
  | ! | grp   |     |
  |---+-------+-----|
  | # | A     |  12 |
  | # | B     |   1 |
  | # | C     |   5 |
  #+TBLFM: $3='(org-sbe calc_add_if_match2 (tbl $"tbl_grp") (col1 $"group") (col2 $"use") (vcol $"value") (match1 $$grp) (match2 $"1") )


  Here another function to add up a time interval and a clock value.
   #+NAME: timeadd
   #+BEGIN_SRC emacs-lisp :results value :var inputtime="9:00" delta="30" :exports both
     (let ((date (org-parse-time-string
                  (concat "2015-06-01 "
                          (substring-no-properties inputtime)))))
       (setf (nth 1 date) (+ (nth 1 date) (string-to-number delta)))
       (format-time-string "%H:%M" (apply 'encode-time date)))
   #+END_SRC

   #+RESULTS: timeadd
   : 09:30

  And we use it for calculating the clock value for an interview schedule in
  the following table.
  
  | Item                          | duration | starting |
  |                               |    (min) |  time AM |
  |-------------------------------+----------+----------|
  | Presentation by the candidate |       20 |     8:30 |
  | Presentation Questions        |       10 |    08:50 |
  | Break                         |       15 |    09:00 |
  | Main interview                |       90 |    09:15 |
  | Break                         |       15 |    10:45 |
  | HR Interview                  |       60 |    11:00 |
  | optional Lunch / Coffee       |       60 |    12:00 |
  | optional interview            |       30 |    13:00 |
   #+TBLFM: @4$3..@>$3='(org-sbe timeadd (inputtime $@-1) (delta $@-1$-1))

** a look at the involved lisp functions

*** org-sbe

    #+BEGIN_EXAMPLE
#+TBLFM: @I$6..@II$6='(org-sbe addmonths (argdate $$sdate) (argmonths $$wpmonths))
    #+END_EXAMPLE

    The double dollar ends up in passing this kind of code line where
    the resulting string arguments are headed by a dollar sign:

    #+BEGIN_SRC emacs-lisp
    (org-sbe addmonths (argdate $"2015-01-01") (argmonths $"24"))
    #+END_SRC

       #+RESULTS:
       : 2016-12-30

*** org-table-get-remote-range
    There seems to be a bug in the org-table-get-remote-range
    function. When I reference the remote range by a field name
    (defined by "^" in the first column), the result is a string that
    contains the field value wrapped in parentheses:
    #+BEGIN_SRC emacs-lisp :results output
      (princ (pp-to-string (org-table-get-remote-range "remtable1" "$ref_number" )))
      (princ (pp-to-string (org-table-get-remote-range "remtable1" "@2$3" )))
      (princ (pp-to-string (org-table-get-remote-range "remtable1" "$ref_date" )))
      (princ (pp-to-string (org-table-get-remote-range "remtable1" "@4$3" )))
    #+END_SRC

    #+RESULTS:
    : #("(24)" 1 3
    :   (face org-table fontified t))
    : #("24" 0 2
    :   (fontified t face org-table))
    : #("(2014-01-02)" 1 11
    :   (face org-table fontified t))
    : #("2014-01-02" 0 10
    :   (fontified t face org-table))

    Exploring the usage of =remote= inside of a table.
    - The date is read as an equation ("-" is minus) and I get the
      result of a substraction
    
    Table for remote table test
    #+NAME: remtable1
    #+CAPTION: global model parameters
    |   | Entry    | Value      |
    |---+----------+------------|
    |   | a number | 24         |
    | ^ |          | ref_number |
    |   | a date   | 2014-01-02 |
    | ^ |          | ref_date   |


    Here we try different ways of referencing remote fields
    | Entry         | field name ref | num ref | lisp + field name |
    | remote number |             24 |      24 | (24)              |
    | remote date   |           2011 |    2011 | (2014-01-02)      |
    #+TBLFM: @2$2=remote(remtable1,$ref_number)::@2$3=remote(remtable1,@2$3)::@2$4='(identity remote(remtable1,$ref_number))::@3$2=remote(remtable1,$ref_date)::@3$3=remote(remtable1,@4$3)::@3$4='(identity remote(remtable1,$ref_date))


* Column names and remote references

  - One must be careful and *not use a remote column name that also is used in the current table*.
    Seems that the substitution of the value in the current scope takes precedence over the one
    in the remote scope.
  - Underscores in column names generate some strange behavior and should for now be avoided.
    The effect is seen in the Value4 column in the refferingtable2.
  
  #+NAME: remtable2
  |   | Entry    | Value | Value2 | Value3  | Value4  |
  | ! | entry    | value | value2 | value3a | value_a4 |
  | # | example1 | 1     | 2      | 3       | 4       |
  |   |          |       |        |         |         |

  #+NAME: referringtable2
  |   | Entry | Value | Value2 | Value3 | Value4 |
  | ! |       |       |        |        |        |
  | # |       |     1 |      2 |      3 |      1 |
  #+TBLFM: @3$3=remote(remtable2,@3$value)::@3$4=remote(remtable2,@3$value2)::@3$5=remote(remtable2,@3$value3a)::@3$6=remote(remtable2,@3$value_a4)

  
* table lookup functions
  Interesting advanced possibilities are opened up when using the org table lookup
  functions

  http://orgmode.org/worg/org-tutorials/org-lookups.html


  We define a mapping table. Note that we have two mappings for the string "two".
  #+TBLNAME: tblhash
  | one   |   1 |
  | two   |   2 |
  | three |   3 |
  | four  |   4 |
  | two   | 100 |


  We fill the second column of the table below according to the
  associative array defined by the table above. Values which cannot
  be mapped yield an error. =org-lookup-first= will find the first
  matching row and give back the associated mapped value.
  | three |      3 |
  | five  | #ERROR |
  | two   |      2 |
  | six   | #ERROR |
  | one   |      1 |
  | four  |      4 |
  #+TBLFM: $2='(org-lookup-first $1 '(remote(tblhash,@1$1..@>$1)) '(remote(tblhash,@1$2..@>$2)))


  =org-lookup-last= accordingly takes the values from the last row that matched.
  | three |      3 |
  | five  | #ERROR |
  | two   |    100 |
  | six   | #ERROR |
  | one   |      1 |
  | four  |      4 |
  #+TBLFM: $2='(org-lookup-last $1 '(remote(tblhash,@1$1..@>$1)) '(remote(tblhash,@1$2..@>$2)))


* Bugs I found [1/2]
** DONE table names like p2_somename
   CLOSED: [2014-08-01 Fri 14:19]
   *do not use table names like p2_somename or
   somename_p2_someother.* The p2 is interpretet as column P, field 2
   when you go back from the table editor (C-'), and it will be
   substituted by the numeric location @2$16. This happens when you
   use a remote(p2_somename,somefield) reference in a formula. It
   clearly is a bug.
   *This seems to be fixed in org-version 8.2.7c*

   #+NAME: p2_somename
   | one | two |
   | 1   | 2   |

   | col1 | col2 |
   |    2 |      |
   |      |      |
   #+TBLFM: @2$1=remote(p2_somename,@2$2)

** TODO table referenced by remote calls must not contain same column names

   #+NAME: remtableIdColName
   |   | one | two |
   |---+-----+-----|
   | ! | one | two |
   | # |   1 |   2 |
   | # |   3 |   4 |

   in the following remote call, the $one variable is replaced by the
   local value of the $one (which is 2) instead of the one in the table
   that we refer to
   #+NAME: refertableIdColName
   |   | one | two |
   |---+-----+-----|
   | ! | two | one |
   | # | 2   |     |
   |   |     |     |
#+TBLFM: @3$2=remote(remtableIdColName,@3$one)

* Org Babel settings
Local variables:
org-confirm-babel-evaluate: nil
org-export-babel-evaluate: nil
End:
